/*
 * Grid.cpp
 *
 *  Created on: Oct 17, 2015
 *      Author: user
 */
/*
 * You are given an mxn grid , where (0,0) refers top most left position and (m1,
n1)
the bottom
most right. The grid is filled with ones. All positions in the grid that are blocked are filled with
zeros. You are given this grid and are assured that there exists at least one path from (0,0) to
(m1,
n1).
Find the minimum distance of the path from (0,0) to (m1,
n1)
given that you are
allowed to move only vertically, horizontally and diagonally.
 */

#include <iostream>
#include<string>
#include<climits>
#include<vector>
#include<ctime>   //for isUpper
#include<map>
using namespace std;

#define m 4
#define n 5

bool isValidMove(int next_x,int next_y){
	if(next_x<0 || next_x>m-1 ||next_y<0 || next_y>m-1 || next_y>n-1){
		return false;
	}
	return true;
}
void moves(int grid[m][n],int curr_x,int curr_y,int& minMoves,int moves){
	if(curr_x==m-1 && curr_y==n-1){
		if(moves<minMoves){
			minMoves=moves;

		}
		return;
	}

	int x[8]={};
	int y[8]={};
	for(int i=0;i<8;i++){
		int next_x=curr_x+x[i];
		int next_y=curr_y+y[i];
		if(isValidMove(next_x,next_y)){
			moves++;
			moves(grid,next_x,next_y,minMoves,moves);
		}
	}
}

int main(){
	int grid[m][n];

}



